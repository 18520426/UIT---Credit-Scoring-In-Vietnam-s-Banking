{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16718,"status":"ok","timestamp":1609301593802,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"1aeB8I9HNFOG","outputId":"047afe8d-90b1-4ec4-cfc4-759eb860c37c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting feature_engine\n","  Downloading https://files.pythonhosted.org/packages/14/ed/5680bf401855b788f79cadc1298c210c5860eb5d54c4008cfa234b752ef1/feature_engine-0.6.1-py2.py3-none-any.whl\n","Requirement already satisfied: pandas\u003e=1.0.3 in /usr/local/lib/python3.6/dist-packages (from feature_engine) (1.1.5)\n","Requirement already satisfied: scikit-learn\u003e=0.22.2 in /usr/local/lib/python3.6/dist-packages (from feature_engine) (0.22.2.post1)\n","Requirement already satisfied: numpy\u003e=1.18.2 in /usr/local/lib/python3.6/dist-packages (from feature_engine) (1.19.4)\n","Collecting statsmodels\u003e=0.11.1\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/be/4c/9e2435ca6645d6bafa2b51bb11f0a365b28934a2ffe9d6e339d67130926d/statsmodels-0.12.1-cp36-cp36m-manylinux1_x86_64.whl (9.5MB)\n","\u001b[K     |████████████████████████████████| 9.5MB 8.4MB/s \n","\u001b[?25hRequirement already satisfied: scipy\u003e=1.4.1 in /usr/local/lib/python3.6/dist-packages (from feature_engine) (1.4.1)\n","Requirement already satisfied: python-dateutil\u003e=2.7.3 in /usr/local/lib/python3.6/dist-packages (from pandas\u003e=1.0.3-\u003efeature_engine) (2.8.1)\n","Requirement already satisfied: pytz\u003e=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas\u003e=1.0.3-\u003efeature_engine) (2018.9)\n","Requirement already satisfied: joblib\u003e=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn\u003e=0.22.2-\u003efeature_engine) (1.0.0)\n","Requirement already satisfied: patsy\u003e=0.5 in /usr/local/lib/python3.6/dist-packages (from statsmodels\u003e=0.11.1-\u003efeature_engine) (0.5.1)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil\u003e=2.7.3-\u003epandas\u003e=1.0.3-\u003efeature_engine) (1.15.0)\n","Installing collected packages: statsmodels, feature-engine\n","  Found existing installation: statsmodels 0.10.2\n","    Uninstalling statsmodels-0.10.2:\n","      Successfully uninstalled statsmodels-0.10.2\n","Successfully installed feature-engine-0.6.1 statsmodels-0.12.1\n","Collecting unidecode\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/74/65/91eab655041e9e92f948cb7302e54962035762ce7b518272ed9d6b269e93/Unidecode-1.1.2-py2.py3-none-any.whl (239kB)\n","\u001b[K     |████████████████████████████████| 245kB 8.5MB/s \n","\u001b[?25hInstalling collected packages: unidecode\n","Successfully installed unidecode-1.1.2\n","Collecting category_encoders\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/44/57/fcef41c248701ee62e8325026b90c432adea35555cbc870aff9cfba23727/category_encoders-2.2.2-py2.py3-none-any.whl (80kB)\n","\u001b[K     |████████████████████████████████| 81kB 5.1MB/s \n","\u001b[?25hRequirement already satisfied: scipy\u003e=1.0.0 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (1.4.1)\n","Requirement already satisfied: statsmodels\u003e=0.9.0 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (0.12.1)\n","Requirement already satisfied: patsy\u003e=0.5.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (0.5.1)\n","Requirement already satisfied: pandas\u003e=0.21.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (1.1.5)\n","Requirement already satisfied: numpy\u003e=1.14.0 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (1.19.4)\n","Requirement already satisfied: scikit-learn\u003e=0.20.0 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (0.22.2.post1)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from patsy\u003e=0.5.1-\u003ecategory_encoders) (1.15.0)\n","Requirement already satisfied: python-dateutil\u003e=2.7.3 in /usr/local/lib/python3.6/dist-packages (from pandas\u003e=0.21.1-\u003ecategory_encoders) (2.8.1)\n","Requirement already satisfied: pytz\u003e=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas\u003e=0.21.1-\u003ecategory_encoders) (2018.9)\n","Requirement already satisfied: joblib\u003e=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn\u003e=0.20.0-\u003ecategory_encoders) (1.0.0)\n","Installing collected packages: category-encoders\n","Successfully installed category-encoders-2.2.2\n"]}],"source":["!pip install feature_engine\n","!pip install unidecode\n","!pip install category_encoders"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":2611,"status":"ok","timestamp":1609301596423,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"gV9QDy-bDHzm"},"outputs":[],"source":["import pandas as pd\n","from lightgbm import LGBMClassifier\n","import category_encoders as ce\n","import numpy as np\n","import matplotlib\n","import matplotlib.pyplot as plt\n","%matplotlib inline"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28259,"status":"ok","timestamp":1609301632801,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"lJU_PZCVDqBv","outputId":"4ade6f9d-053b-4e6d-8877-2bf9c7308285"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":867,"status":"ok","timestamp":1609301633682,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"wnCJmCMVD4OU","outputId":"12db2269-3877-4299-dcc8-6b8c331bb0c9"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/kalapa\n"]}],"source":["cd /content/drive/My Drive/kalapa"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4849,"status":"ok","timestamp":1609301637674,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"_Wuf8IHoEBGt","outputId":"8193fbfe-918a-4714-a306-eb107d13ca9d"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (35,43) have mixed types.Specify dtype option on import or set low_memory=False.\n","  interactivity=interactivity, compiler=compiler, result=result)\n"]},{"name":"stdout","output_type":"stream","text":["----------------------------------------------------------------------\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (34,42) have mixed types.Specify dtype option on import or set low_memory=False.\n","  interactivity=interactivity, compiler=compiler, result=result)\n"]}],"source":["train_df = pd.read_csv(\"/content/drive/My Drive/kalapa/dataset/train.csv\")\n","test_df = pd.read_csv(\"/content/drive/My Drive/kalapa/dataset/test.csv\")\n","print(\"-\"*70)"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":4847,"status":"ok","timestamp":1609301637676,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"sOw1FlkNGMV6"},"outputs":[],"source":["def feature_engineering(train, test):\n","    labels = train['label']\n","    data = train.drop(columns=['label']).append(test, ignore_index=True)\n","    remove_features = ['Field_1', 'Field_2', 'Field_4', 'Field_5', 'Field_6', 'Field_7', 'Field_8', 'Field_9',\n","                       'Field_11', 'Field_12', 'Field_15', 'Field_18', 'Field_25', 'Field_32', 'Field_33',\n","                       'Field_34', 'Field_35', 'gioiTinh', 'diaChi', 'Field_36', 'Field_38', 'Field_40',\n","                       'Field_43', 'Field_44', 'Field_45', 'Field_46', 'Field_47', 'Field_48', 'Field_49',\n","                       'Field_54', 'Field_55', 'Field_56', 'Field_61', 'Field_62', 'Field_65', 'Field_66',\n","                       'Field_68', 'maCv', 'info_social_sex', 'data.basic_info.locale', 'currentLocationCity',\n","                       'currentLocationCountry', 'currentLocationName', 'currentLocationState', 'homeTownCity',\n","                       'homeTownCountry', 'homeTownName', 'homeTownState', 'F_startDate', 'F_endDate',\n","                       'E_startDate', 'E_endDate', 'C_startDate', 'C_endDate', 'G_startDate', 'G_endDate',\n","                       'A_startDate', 'A_endDate', 'brief']\n","\n","    cat_features_count_encode = ['Field_4', 'Field_12', 'Field_18', 'Field_34', 'gioiTinh', 'diaChi', 'Field_36',\n","                                 'Field_38', 'Field_45', 'Field_46', 'Field_47', 'Field_48', 'Field_49',\n","                       'Field_54', 'Field_55', 'Field_56', 'Field_61', 'Field_62', 'Field_65', 'Field_66',\n","                       'Field_68', 'maCv', 'info_social_sex', 'data.basic_info.locale', 'currentLocationCity',\n","                       'currentLocationCountry', 'currentLocationName', 'currentLocationState', 'homeTownCity',\n","                       'homeTownCountry', 'homeTownName', 'homeTownState', 'brief']\n","    \n","    cat_date_array = ['Field_1', 'Field_2', 'Field_5', 'Field_6', 'Field_7', 'Field_8', 'Field_9', 'Field_11',\n","                      'Field_15', 'Field_25', 'Field_32', 'Field_33', 'Field_35', 'Field_40', 'Field_43',\n","                      'Field_44', 'F_startDate', 'F_endDate', 'E_startDate', 'E_endDate', 'C_startDate',\n","                      'C_endDate', 'G_startDate', 'G_endDate', 'A_startDate', 'A_endDate']\n","    for col in cat_date_array:\n","        data[col+'Year'] = pd.DatetimeIndex(data[col]).year\n","        data[col+'Month'] = pd.DatetimeIndex(data[col]).month\n","        data[col+'Day'] = pd.DatetimeIndex(data[col]).day\n","    \n","    data[remove_features].fillna(\"Missing\", inplace=True)\n","    count_en = ce.CountEncoder()\n","    cat_ce = count_en.fit_transform(data[cat_features_count_encode])\n","    data = data.join(cat_ce.add_suffix(\"_ce\"))\n","    \n","    data.replace(\"None\", -1, inplace=True)\n","    data.replace(\"Missing\", -999, inplace=True)\n","    data.fillna(-999, inplace=True)\n","\n","    _train = data[data['id'] \u003c 53030]\n","    _test = data[data['id'] \u003e= 53030]\n","    \n","    _train[\"label\"] = labels\n","\n","    _train.drop(columns=remove_features, inplace=True)\n","    _test.drop(columns=remove_features, inplace=True)\n","    \n","    return _train, _test"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":102353,"status":"ok","timestamp":1609301735190,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"Oyg3frxjJhm1","outputId":"b407bf3d-2d5f-48cb-9f80-5904f5ade485"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4327: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  downcast=downcast,\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:43: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4174: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]}],"source":["train_data, test_data = feature_engineering(train_df, test_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"5eCHr7OcENpu"},"outputs":[{"name":"stdout","output_type":"stream","text":["WoE and IV for column: Field_3\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_10\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_13\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_14\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_16\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_17\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_19\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.04\n","\n","\n","WoE and IV for column: Field_20\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.1\n","\n","\n","WoE and IV for column: Field_21\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_22\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_23\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.06\n","\n","\n","WoE and IV for column: Field_24\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_26\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_27\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.03\n","\n","\n","WoE and IV for column: Field_28\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.03\n","\n","\n","WoE and IV for column: Field_29\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.03\n","\n","\n","WoE and IV for column: Field_30\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_31\n","IV score: 0.02\n","\n","\n","WoE and IV for column: ngaySinh\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.19\n","\n","\n","WoE and IV for column: namSinh\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_37\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_39\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_41\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_42\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_50\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_51\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_52\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_53\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_57\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_58\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_59\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.06\n","\n","\n","WoE and IV for column: Field_60\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.06\n","\n","\n","WoE and IV for column: Field_63\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_64\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_67\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.13\n","\n","\n","WoE and IV for column: Field_69\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_70\n","IV score: 0.05\n","\n","\n","WoE and IV for column: Field_71\n","IV score: 0.06\n","\n","\n","WoE and IV for column: Field_72\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.05\n","\n","\n","WoE and IV for column: Field_73\n","IV score: 0.07\n","\n","\n","WoE and IV for column: Field_74\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.06\n","\n","\n","WoE and IV for column: Field_75\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_76\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_77\n","IV score: 0.02\n","\n","\n","WoE and IV for column: friendCount\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.09\n","\n","\n","WoE and IV for column: subscriberCount\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.05\n","\n","\n","WoE and IV for column: currentLocationLocationId\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.07\n","\n","\n","WoE and IV for column: currentLocationLatitude\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.07\n","\n","\n","WoE and IV for column: currentLocationLongitude\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.07\n","\n","\n","WoE and IV for column: homeTownLocationId\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.08\n","\n","\n","WoE and IV for column: homeTownLatitude\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.07\n","\n","\n","WoE and IV for column: homeTownLongitude\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.07\n","\n","\n","WoE and IV for column: topFriends\n","IV score: 0.04\n","\n","\n","WoE and IV for column: numOrg\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.04\n","\n","\n","WoE and IV for column: F_numOrg\n","IV score: 0.01\n","\n","\n","WoE and IV for column: F_numQuery\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.0\n","\n","\n","WoE and IV for column: E_numOrg\n","IV score: 0.01\n","\n","\n","WoE and IV for column: E_numQuery\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.0\n","\n","\n","WoE and IV for column: C_numOrg\n","IV score: 0.0\n","\n","\n","WoE and IV for column: C_numQuery\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.01\n","\n","\n","WoE and IV for column: G_numOrg\n","IV score: 0.01\n","\n","\n","WoE and IV for column: G_numQuery\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.02\n","\n","\n","WoE and IV for column: A_numOrg\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.02\n","\n","\n","WoE and IV for column: A_numQuery\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.01\n","\n","\n","WoE and IV for column: summary_6m\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.01\n","\n","\n","WoE and IV for column: summary_3m\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.02\n","\n","\n","WoE and IV for column: summary_1m\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.04\n","\n","\n","WoE and IV for column: summary_1w\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.03\n","\n","\n","WoE and IV for column: partner0_A\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner0_B\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner0_C\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner0_D\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner0_E\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner0_F\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner0_G\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner0_H\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner0_K\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner0_L\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner1_A\n","IV score: 0.03\n","\n","\n","WoE and IV for column: partner1_B\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner1_C\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner1_D\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner1_E\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner1_F\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner1_G\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner1_H\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner1_K\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner1_L\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_A\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_B\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_C\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_D\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_E\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_F\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_G\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_H\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_K\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner2_L\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner3_A\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner3_B\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner3_C\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner3_D\n","IV score: 0.03\n","\n","\n","WoE and IV for column: partner3_E\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner3_F\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner3_G\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner3_H\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner3_K\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner3_L\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_A\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_B\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_C\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_D\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_E\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_F\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_G\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_H\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_K\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner4_L\n","IV score: 0.03\n","\n","\n","WoE and IV for column: partner5_A\n","IV score: 0.03\n","\n","\n","WoE and IV for column: partner5_B\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner5_C\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner5_D\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner5_E\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner5_F\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner5_G\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner5_H\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner5_K\n","IV score: 0.02\n","\n","\n","WoE and IV for column: partner5_L\n","IV score: 0.02\n","\n","\n","WoE and IV for column: num_of_phone\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.07\n","\n","\n","WoE and IV for column: Field_78\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.06\n","\n","\n","WoE and IV for column: Field_79\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.12\n","\n","\n","WoE and IV for column: Field_80\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.14\n","\n","\n","WoE and IV for column: Field_81\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.06\n","\n","\n","WoE and IV for column: Field_82\n","IV score: 0.26\n","\n","\n","WoE and IV for column: Field_1Year\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_1Month\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_1Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_2Year\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_2Month\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_2Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_5Year\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_5Month\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_5Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_6Year\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_6Month\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_6Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_7Year\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_7Month\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_7Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_8Year\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.03\n","\n","\n","WoE and IV for column: Field_8Month\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_8Day\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_9Year\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_9Month\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_9Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_11Year\n","IV score: 0.0\n","\n","\n","WoE and IV for column: Field_11Month\n","IV score: 0.0\n","\n","\n","WoE and IV for column: Field_11Day\n","IV score: 0.01\n","\n","\n","WoE and IV for column: Field_15Year\n","IV score: 0.0\n","\n","\n","WoE and IV for column: Field_15Month\n","IV score: 0.0\n","\n","\n","WoE and IV for column: Field_15Day\n","IV score: 0.0\n","\n","\n","WoE and IV for column: Field_25Year\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_25Month\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_25Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_32Year\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.03\n","\n","\n","WoE and IV for column: Field_32Month\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_32Day\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_33Year\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_33Month\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_33Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_35Year\n","IV score: 0.0\n","\n","\n","WoE and IV for column: Field_35Month\n","IV score: 0.0\n","\n","\n","WoE and IV for column: Field_35Day\n","IV score: 0.01\n","\n","\n","WoE and IV for column: Field_40Year\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_40Month\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_40Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_43Year\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_43Month\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_43Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_44Year\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_44Month\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_44Day\n","IV score: 0.03\n","\n","\n","WoE and IV for column: F_startDateYear\n","IV score: 0.0\n","\n","\n","WoE and IV for column: F_startDateMonth\n","IV score: 0.01\n","\n","\n","WoE and IV for column: F_startDateDay\n","IV score: 0.01\n","\n","\n","WoE and IV for column: F_endDateYear\n","IV score: 0.01\n","\n","\n","WoE and IV for column: F_endDateMonth\n","IV score: 0.01\n","\n","\n","WoE and IV for column: F_endDateDay\n","IV score: 0.0\n","\n","\n","WoE and IV for column: E_startDateYear\n","IV score: 0.0\n","\n","\n","WoE and IV for column: E_startDateMonth\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.01\n","\n","\n","WoE and IV for column: E_startDateDay\n","IV score: 0.01\n","\n","\n","WoE and IV for column: E_endDateYear\n","IV score: 0.01\n","\n","\n","WoE and IV for column: E_endDateMonth\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.01\n","\n","\n","WoE and IV for column: E_endDateDay\n","IV score: 0.0\n","\n","\n","WoE and IV for column: C_startDateYear\n","IV score: 0.0\n","\n","\n","WoE and IV for column: C_startDateMonth\n","IV score: 0.0\n","\n","\n","WoE and IV for column: C_startDateDay\n","IV score: 0.01\n","\n","\n","WoE and IV for column: C_endDateYear\n","IV score: 0.01\n","\n","\n","WoE and IV for column: C_endDateMonth\n","IV score: 0.01\n","\n","\n","WoE and IV for column: C_endDateDay\n","IV score: 0.0\n","\n","\n","WoE and IV for column: G_startDateYear\n","IV score: 0.0\n","\n","\n","WoE and IV for column: G_startDateMonth\n","IV score: 0.01\n","\n","\n","WoE and IV for column: G_startDateDay\n","IV score: 0.0\n","\n","\n","WoE and IV for column: G_endDateYear\n","IV score: 0.0\n","\n","\n","WoE and IV for column: G_endDateMonth\n","IV score: 0.01\n","\n","\n","WoE and IV for column: G_endDateDay\n","IV score: 0.0\n","\n","\n","WoE and IV for column: A_startDateYear\n","IV score: 0.0\n","\n","\n","WoE and IV for column: A_startDateMonth\n","IV score: 0.02\n","\n","\n","WoE and IV for column: A_startDateDay\n","IV score: 0.0\n","\n","\n","WoE and IV for column: A_endDateYear\n","IV score: 0.01\n","\n","\n","WoE and IV for column: A_endDateMonth\n","IV score: 0.01\n","\n","\n","WoE and IV for column: A_endDateDay\n","IV score: 0.01\n","\n","\n","WoE and IV for column: Field_4_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_12_ce\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.0\n","\n","\n","WoE and IV for column: Field_18_ce\n","IV score: 0.0\n","\n","\n","WoE and IV for column: Field_34_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: gioiTinh_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: diaChi_ce\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_36_ce\n","IV score: 0.05\n","\n","\n","WoE and IV for column: Field_38_ce\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_45_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_46_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_47_ce\n","IV score: 0.02\n","\n","\n","WoE and IV for column: Field_48_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_49_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: Field_54_ce\n","IV score: 0.01\n","\n","\n","WoE and IV for column: Field_55_ce\n","IV score: 0.07\n","\n","\n","WoE and IV for column: Field_56_ce\n","IV score: 0.07\n","\n","\n","WoE and IV for column: Field_61_ce\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/series.py:726: RuntimeWarning: divide by zero encountered in log\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["IV score: 0.06\n","\n","\n","WoE and IV for column: Field_62_ce\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_65_ce\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_66_ce\n","IV score: 0.03\n","\n","\n","WoE and IV for column: Field_68_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: maCv_ce\n","IV score: 0.02\n","\n","\n","WoE and IV for column: info_social_sex_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: data.basic_info.locale_ce\n","IV score: 0.03\n","\n","\n","WoE and IV for column: currentLocationCity_ce\n","IV score: 0.05\n","\n","\n","WoE and IV for column: currentLocationCountry_ce\n","IV score: 0.03\n","\n","\n","WoE and IV for column: currentLocationName_ce\n","IV score: 0.05\n","\n","\n","WoE and IV for column: currentLocationState_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: homeTownCity_ce\n","IV score: 0.05\n","\n","\n","WoE and IV for column: homeTownCountry_ce\n","IV score: 0.03\n","\n","\n","WoE and IV for column: homeTownName_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: homeTownState_ce\n","IV score: 0.04\n","\n","\n","WoE and IV for column: brief_ce\n","IV score: 0.31\n","\n","\n"]}],"source":["def calculate_woe_iv(dataset, feature, target):\n","    lst = []\n","    for i in range(dataset[feature].nunique()):\n","        val = list(dataset[feature].unique())[i]\n","        lst.append({\n","            'Value': val,\n","            'All': dataset[dataset[feature] == val].count()[feature],\n","            'Good': dataset[(dataset[feature] == val) \u0026 (dataset[target] == 0)].count()[feature],\n","            'Bad': dataset[(dataset[feature] == val) \u0026 (dataset[target] == 1)].count()[feature]\n","        })\n","    dset = pd.DataFrame(lst)\n","    dset['Distr_Good'] = dset['Good'] / dset['Good'].sum()\n","    dset['Distr_Bad'] = dset['Bad'] / dset['Bad'].sum()\n","    dset['WoE'] = np.log(dset['Distr_Good'] / dset['Distr_Bad'])\n","    dset = dset.replace({'WoE': {np.inf: 0, -np.inf: 0}})\n","    dset['IV'] = (dset['Distr_Good'] - dset['Distr_Bad']) * dset['WoE']\n","    iv = dset['IV'].sum()\n","    dset = dset.sort_values(by='WoE')\n","    return dset, iv\n","\n","USELESS_PREDICTOR = []\n","WEAK_PREDICTOR = []\n","MEDIUM_PREDICTOR = []\n","STRONG_PREDICTOR = []\n","GOOD_PREDICTOR = []\n","IGNORE_FEATURE = USELESS_PREDICTOR + WEAK_PREDICTOR\n","for col in train_data.columns:\n","    if col == 'label' or col == 'id': continue\n","    elif col in IGNORE_FEATURE: continue\n","    else:\n","        print('WoE and IV for column: {}'.format(col))\n","        final, iv = calculate_woe_iv(train_data, col, 'label')\n","        iv = round(iv,2)\n","        print('IV score: ' + str(iv))\n","        print('\\n')\n","        if (iv \u003c 0.02) and col not in USELESS_PREDICTOR:\n","            USELESS_PREDICTOR.append(col)\n","        elif iv \u003e= 0.02 and iv \u003c 0.1 and col not in WEAK_PREDICTOR:\n","            WEAK_PREDICTOR.append(col)\n","        elif iv \u003e= 0.1 and iv \u003c 0.3 and col not in MEDIUM_PREDICTOR:\n","            MEDIUM_PREDICTOR.append(col)\n","        elif iv \u003e= 0.3 and iv \u003c 0.5 and col not in STRONG_PREDICTOR:\n","            STRONG_PREDICTOR.append(col)\n","        elif iv \u003e= 0.5 and col not in GOOD_PREDICTOR:\n","            GOOD_PREDICTOR.append(col)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m8j6srTBxS6n"},"outputs":[],"source":["IGNORE_FEATURE = USELESS_PREDICTOR\n","final_train_data = train_data.drop(columns=IGNORE_FEATURE)\n","final_test_data = test_data.drop(columns=[col for col in IGNORE_FEATURE if col not in ['label']])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7fQVum3nsoTF"},"outputs":[],"source":["import gc\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import roc_auc_score, roc_curve, auc, f1_score, confusion_matrix, recall_score, classification_report\n","import seaborn as sns\n","\n","\n","# Display/plot feature importance\n","def display_importances(feature_importance_df_):\n","    cols = feature_importance_df_[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(by=\"importance\", ascending=False)[:40].index\n","    best_features = feature_importance_df_.loc[feature_importance_df_.feature.isin(cols)]\n","    plt.figure(figsize=(8, 10))\n","    sns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False))\n","    plt.title('LightGBM Features (avg over folds)')\n","    plt.tight_layout()\n","    plt.savefig('lgbm_importances01.png')\n","    \n","def display_roc_curve(y_, oof_preds_,sub_preds_,folds_idx_):\n","    # Plot ROC curves\n","    plt.figure(figsize=(6,6))\n","    scores = [] \n","    for n_fold, (_, val_idx) in enumerate(folds_idx_):  \n","        # Plot the roc curve\n","        fpr, tpr, thresholds = roc_curve(y_.iloc[val_idx], oof_preds_[val_idx])\n","        score = 2 * auc(fpr, tpr) -1\n","        scores.append(score)\n","        plt.plot(fpr, tpr, lw=1, alpha=0.3, label='ROC fold %d (Gini = %0.4f)' % (n_fold + 1, score))\n","    \n","    plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r', label='Chance', alpha=.8)\n","    fpr, tpr, thresholds = roc_curve(y_, oof_preds_)\n","    score = 2 * auc(fpr, tpr) -1\n","    plt.plot(fpr, tpr, color='b',\n","             label='Avg ROC (Gini = %0.4f $\\pm$ %0.4f)' % (score, np.std(scores)),\n","             lw=2, alpha=.8)\n","    \n","    plt.xlim([-0.05, 1.05])\n","    plt.ylim([-0.05, 1.05])\n","    plt.xlabel('False Positive Rate')\n","    plt.ylabel('True Positive Rate')\n","    plt.title('LightGBM ROC Curve')\n","    plt.legend(loc=\"lower right\")\n","    plt.tight_layout()\n","    plt.savefig('roc_curve.png')\n","\n","\n","# LightGBM GBDT with Stratified KFold\n","def kfold_lightgbm(train_df, test_df, num_folds, stratified = False, debug= False):\n","    # Divide in training/validation and test data\n","    print(\"Starting LightGBM. Train shape: {}, test shape: {}\".format(train_df.shape, test_df.shape))\n","    gc.collect()\n","    # Cross validation model\n","    folds = StratifiedKFold(n_splits= num_folds, shuffle=True, random_state=500)\n","\n","    # Create arrays and dataframes to store results\n","    oof_preds = np.zeros(train_df.shape[0])\n","    sub_preds = np.zeros(test_df.shape[0])\n","    feature_importance_df = pd.DataFrame()\n","    feats = [f for f in train_df.columns if f not in ['label','id']]\n","    \n","    for n_fold, (train_idx, valid_idx) in enumerate(folds.split(train_df[feats], train_df['label'])):        \n","        train_x, train_y = train_df[feats].iloc[train_idx], train_df['label'].iloc[train_idx]\n","        valid_x, valid_y = train_df[feats].iloc[valid_idx], train_df['label'].iloc[valid_idx]\n","\n","        clf = LGBMClassifier(\n","            nthread=4,\n","            n_estimators=10000,\n","            learning_rate=0.02,\n","            num_leaves=128,\n","            colsample_bytree=0.9497036,\n","            subsample=0.8715623,\n","            max_depth=8,\n","            reg_alpha=0.041545473,\n","            reg_lambda=0.0735294,\n","            min_split_gain=0.0222415,\n","            min_child_weight=39.3259775,\n","            silent=-1,\n","            verbose=-1\n","        )\n","\n","        clf.fit(train_x, train_y.ravel(), eval_set=[(train_x, train_y), (valid_x, valid_y)], \n","            eval_metric='auc', verbose= 1000, early_stopping_rounds= 200)\n","\n","        oof_pred = clf.predict_proba(valid_x, num_iteration=clf.best_iteration_)[:, 1]\n","        \n","        pred = clf.predict(valid_x, num_iteration=clf.best_iteration_)\n","        print('F1 Score: ' + str( f1_score(valid_y, pred) ))\n","        print('Recall Score: ' + str( recall_score(valid_y, pred) ))\n","        \n","        sub_pred = clf.predict_proba(test_df[feats], num_iteration=clf.best_iteration_)[:, 1] / folds.n_splits\n","        oof_preds[valid_idx] = oof_pred\n","        sub_preds += sub_pred\n","                \n","        fold_importance_df = pd.DataFrame()\n","        fold_importance_df[\"feature\"] = feats\n","        fold_importance_df[\"importance\"] = clf.feature_importances_\n","        fold_importance_df[\"fold\"] = n_fold + 1\n","        feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n","        print('Fold %2d AUC : %.6f' % (n_fold + 1, roc_auc_score(valid_y, oof_preds[valid_idx])))\n","        del clf, train_x, train_y, valid_x, valid_y\n","        gc.collect()\n","\n","    print('Full AUC score %.6f' % roc_auc_score(train_df['label'], oof_preds))\n","    \n","    folds_idx = [(trn_idx, val_idx) for trn_idx, val_idx in folds.split(train_df[feats], train_df['label'])]\n","    #display_roc_curve(y_=train_df['label'],oof_preds_=oof_preds,sub_preds_ = sub_preds, folds_idx_=folds_idx)\n","    \n","    # Write submission file and plot feature importance\n","    display_importances(feature_importance_df.tail(30))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":282428,"status":"ok","timestamp":1601859660465,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"fTxtkcNVGfiB","outputId":"254eaabc-efb8-46ec-caf0-9df45cb59266"},"outputs":[{"name":"stdout","output_type":"stream","text":["Starting LightGBM. Train shape: (53030, 197), test shape: (20381, 196)\n","Training until validation scores don't improve for 200 rounds.\n","[1000]\tvalid_0's binary_logloss: 0.445527\tvalid_0's auc: 0.861335\tvalid_1's binary_logloss: 0.534014\tvalid_1's auc: 0.740303\n","Early stopping, best iteration is:\n","[834]\tvalid_0's binary_logloss: 0.453213\tvalid_0's auc: 0.853391\tvalid_1's binary_logloss: 0.533739\tvalid_1's auc: 0.74057\n","F1 Score: 0.47380675203725253\n","Recall Score: 0.36339285714285713\n","Fold  1 AUC : 0.740570\n","Training until validation scores don't improve for 200 rounds.\n","[1000]\tvalid_0's binary_logloss: 0.446584\tvalid_0's auc: 0.861076\tvalid_1's binary_logloss: 0.530764\tvalid_1's auc: 0.750866\n","Early stopping, best iteration is:\n","[1033]\tvalid_0's binary_logloss: 0.444823\tvalid_0's auc: 0.862805\tvalid_1's binary_logloss: 0.530719\tvalid_1's auc: 0.750947\n","F1 Score: 0.4463894967177242\n","Recall Score: 0.3340279845192021\n","Fold  2 AUC : 0.750947\n","Training until validation scores don't improve for 200 rounds.\n","[1000]\tvalid_0's binary_logloss: 0.447667\tvalid_0's auc: 0.860278\tvalid_1's binary_logloss: 0.525811\tvalid_1's auc: 0.754282\n","Early stopping, best iteration is:\n","[812]\tvalid_0's binary_logloss: 0.457164\tvalid_0's auc: 0.850312\tvalid_1's binary_logloss: 0.525603\tvalid_1's auc: 0.754722\n","F1 Score: 0.4678990260385609\n","Recall Score: 0.350401905328967\n","Fold  3 AUC : 0.754722\n","Training until validation scores don't improve for 200 rounds.\n","[1000]\tvalid_0's binary_logloss: 0.447808\tvalid_0's auc: 0.860252\tvalid_1's binary_logloss: 0.526509\tvalid_1's auc: 0.754227\n","Early stopping, best iteration is:\n","[1085]\tvalid_0's binary_logloss: 0.443905\tvalid_0's auc: 0.864043\tvalid_1's binary_logloss: 0.526425\tvalid_1's auc: 0.754343\n","F1 Score: 0.4693996502817175\n","Recall Score: 0.3596308425126526\n","Fold  4 AUC : 0.754343\n","Training until validation scores don't improve for 200 rounds.\n","[1000]\tvalid_0's binary_logloss: 0.447322\tvalid_0's auc: 0.859897\tvalid_1's binary_logloss: 0.526287\tvalid_1's auc: 0.755509\n","Early stopping, best iteration is:\n","[1077]\tvalid_0's binary_logloss: 0.443773\tvalid_0's auc: 0.863453\tvalid_1's binary_logloss: 0.526074\tvalid_1's auc: 0.755709\n","F1 Score: 0.4602295211713495\n","Recall Score: 0.3462339982137541\n","Fold  5 AUC : 0.755709\n","Full AUC score 0.751196\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 576x720 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["kfold_lightgbm(final_train_data, final_test_data, 5)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"elapsed":17432,"status":"ok","timestamp":1601812497349,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"QEYMgT1ndYFq","outputId":"2c3ee36f-0390-4f14-a053-cebce0961323"},"outputs":[{"name":"stdout","output_type":"stream","text":["     After dropping:  (53030, 38) (20381, 37)\n","----------------------------------------\n","Done!\n","------------------------------------------------------------\n"]}],"source":[" cd1 = '/content/drive/My Drive/kalapa'\n","woe_cols = [\n","    'Field_18', 'Field_20', 'Field_23',\n","    'Field_34', 'Field_45', 'Field_46', 'Field_48', 'Field_49', 'Field_55', 'Field_56',\n","    'Field_67', 'Field_71', 'Field_72', 'Field_73', 'Field_74', 'Field_75', 'Field_78', 'Field_79', \n","    'Field_80', 'Field_81', 'Field_82', 'summary_1w', 'summary_1m', 'summary_3m', 'summary_6m',\n","    'currentLocationCity', 'homeTownCity', 'Age', 'A_numOrg', 'numOrg',\n","    'friendCount', 'gender', 'num_of_phone', 'subscriberCount', 'null_sum', 'topFriends'\n","]\n","train_woe_df = {}\n","test_woe_df = {}\n","for col_name in woe_cols:\n","    df1 = pd.read_csv(os.path.join(cd1, 'woe/%s/train.csv'%col_name))\n","    df2 = pd.read_csv(os.path.join(cd1, 'woe/%s/test.csv'%col_name))\n","    for c in df1.columns:\n","        train_woe_df[c] = df1[c]\n","    for c in df2.columns:\n","        test_woe_df[c] = df2[c]\n","\n","train_fe_df = pd.DataFrame.from_dict(train_woe_df)\n","test_fe_df = pd.DataFrame.from_dict(test_woe_df)\n","\n","print(\" \"*4, \"After dropping: \", train_fe_df.shape, test_fe_df.shape)\n","print(\"-\"*40)\n","\n","print(\"Done!\")\n","print(\"-\"*60)\n","\n","train_fe_df.to_csv(os.path.join(cd1, \"train_fe.csv\"), index=False, encoding=\"utf-8\")\n","test_fe_df.to_csv(os.path.join(cd1, \"test_fe.csv\"), index=False, encoding=\"utf-8\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":187},"executionInfo":{"elapsed":10113,"status":"ok","timestamp":1601812540195,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"SRB9zbx-aHMy","outputId":"8b9531ac-8396-4b22-9238-98d004f173f7"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","@Learning\n","+ Data Splitting\n","Stratified 5-fold, seed=2020\n","FOLD 1\n","FOLD 2\n","FOLD 3\n","FOLD 4\n","FOLD 5\n","--------------------------------------------------\n"]}],"source":["# 4. Data Spliting\n","from sklearn.model_selection import train_test_split, StratifiedShuffleSplit\n","\n","print(\"\\n@Learning\")\n","n_folds = 5\n","seed = 2020\n","    \n","print(\"+ Data Splitting\")\n","\n","train_fe_df.label.replace(\"Good\", 0, inplace=True)\n","train_fe_df.label.replace(\"Bad\", 1, inplace=True)\n","print(f\"Stratified {n_folds}-fold, seed={seed}\")\n","y = train_fe_df[\"label\"].values\n","#cv = StratifiedKFold(n_splits=n_folds, shuffle=True, random_state=seed) ##Update\n","cv = StratifiedShuffleSplit(n_splits = n_folds, test_size = 0.2) ##Updated\n","for i, (train, val) in enumerate(cv.split(np.zeros(len(y)), y)):\n","    print(\"FOLD %d\" % (i + 1))\n","    os.makedirs(os.path.join(cd1, \"fold%d\" % i), exist_ok=True)\n","    train_df, val_df = train_fe_df.loc[train], train_fe_df.loc[val]\n","    # use all positive examples for training and evaluation\n","    train_df = pd.concat([train_df, val_df[val_df.label == 1]])\n","    val_df = pd.concat([val_df, train_df[train_df.label == 1]])\n","    train_df.to_csv(os.path.join(cd1, \"fold%d/train.csv\" % i), index=False)\n","    val_df.to_csv(os.path.join(cd1, \"fold%d/val.csv\" % i), index=False)\n","\n","print(\"-\"*50)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":425},"executionInfo":{"elapsed":1207,"status":"error","timestamp":1601812565836,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"_8sttYjSaK_G","outputId":"7b8f8e0d-5d1e-4617-af46-ebbd567bb509"},"outputs":[{"name":"stdout","output_type":"stream","text":["(20381, 36)\n","FOLD 1\n","(45783, 36) (27402, 36)\n"]},{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-14-247867971877\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     59\u001b[0m     )\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 61\u001b[0;31m     \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0mauc_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mroc_auc_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    293\u001b[0m         \"\"\"\n\u001b[1;32m    294\u001b[0m         \u001b[0;31m# Validate or convert input data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 295\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csc'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    576\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    577\u001b[0m             _assert_all_finite(array,\n\u001b[0;32m--\u003e 578\u001b[0;31m                                allow_nan=force_all_finite == 'allow-nan')\n\u001b[0m\u001b[1;32m    579\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    580\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mensure_min_samples\u001b[0m \u001b[0;34m\u003e\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype)\u001b[0m\n\u001b[1;32m     58\u001b[0m                     \u001b[0mmsg_err\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                     (type_err,\n\u001b[0;32m---\u003e 60\u001b[0;31m                      msg_dtype if msg_dtype is not None else X.dtype)\n\u001b[0m\u001b[1;32m     61\u001b[0m             )\n\u001b[1;32m     62\u001b[0m     \u001b[0;31m# for object dtype data, we only check for NaNs (GH-13254)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float32')."]}],"source":["seed = 2020\n","n_trees = 767\n","max_depth = 17\n","min_samples_split = 2\n","min_samples_leaf = 1 \n","max_features = 'auto'\n","class_weight = None\n","bootstrap = True\n","n_folds = 5\n","\n","#embeddings = pd.read_pickle(\"./data/embeddings.pkl\").to_numpy(dtype=np.float32)\n","INPUT_D = '/content/drive/My Drive/kalapa'\n","# submission input\n","X_submit = pd.read_csv(os.path.join(INPUT_DIR, \"test_fe.csv\"))\n","submit_id = X_submit.id.to_numpy(int)\n","submit_dict = {\"id\": submit_id}\n","X_submit.drop(columns=[\"id\"], inplace=True)\n","X_submit = X_submit.to_numpy(dtype=np.float32)\n","#X_submit = np.concatenate([X_submit, embeddings[submit_id]], axis=1)\n","print(X_submit.shape)\n","\n","# training and evaluation\n","tprs = []\n","aucs = []\n","mean_fpr = np.linspace(0, 1, 100)\n","\n","fold_aucs = []\n","\n","fig, ax = plt.subplots()\n","for i in range(n_folds):\n","    print(\"FOLD %d\" % (i + 1))\n","\n","    train_df = pd.read_csv(os.path.join(cd1, \"fold%d/train.csv\" % i))\n","    val_df = pd.read_csv(os.path.join(cd1, \"fold%d/val.csv\" % i))\n","    train_id = train_df.id.to_numpy(int)\n","    val_id = val_df.id.to_numpy(int)\n","    train_df.drop(columns=[\"id\"], inplace=True)\n","    val_df.drop(columns=[\"id\"], inplace=True)\n","    \n","    y_train = train_df[\"label\"].to_numpy(dtype=np.float32)\n","    X_train = train_df.drop(columns=[\"label\"]).to_numpy(dtype=np.float32)\n","    #X_train = np.concatenate([X_train, embeddings[train_id]], axis=1)\n","    y_val = val_df[\"label\"].to_numpy(dtype=np.float32)\n","    X_val = val_df.drop(columns=[\"label\"]).to_numpy(dtype=np.float32)\n","    #X_val = np.concatenate([X_val, embeddings[val_id]], axis=1)\n","    print(X_train.shape, X_val.shape)\n","\n","  \n","    clf = RandomForestClassifier(\n","        n_estimators=n_trees,\n","        max_depth=max_depth,\n","        min_samples_split=min_samples_split,\n","        min_samples_leaf=min_samples_leaf,\n","        max_features=max_features,\n","        random_state=seed,\n","        class_weight=class_weight,\n","        bootstrap=True,\n","        n_jobs=1\n","    )\n","\n","    clf.fit(X_train, y_train)\n","\n","    auc_ = roc_auc_score(y_val, clf.predict_proba(X_val)[:, 1])\n","    print('F1 Score: ' + str( f1_score(y_valid,clf.predict_proba(X_val)[:, 1])))\n","    print('Recall Score: ' + str( recall_score(y_valid, clf.predict_proba(X_val)[:, 1])))\n","    fold_aucs.append(auc_)\n","    print(f\"val AUC = {auc_:.4f}\")\n","\n","    y_submit = clf.predict_proba(X_submit)[:, 1]\n","    submit_dict[\"fold%d\" % i] = y_submit\n","\n","    viz = plot_roc_curve(\n","        clf, X_val, y_val, name=f\"ROC Fold {i}\", alpha=0.3, lw=1, ax=ax\n","    )\n","    interp_tpr = interp(mean_fpr, viz.fpr, viz.tpr)\n","    interp_tpr[0] = 0.0\n","    tprs.append(interp_tpr)\n","    aucs.append(viz.roc_auc)\n","\n","ax.plot([0, 1], [0, 1], linestyle=\"--\", lw=2, color=\"r\", label=\"Random\", alpha=0.8)\n","\n","mean_tpr = np.mean(tprs, axis=0)\n","mean_tpr[-1] = 1.0\n","mean_auc = auc(mean_fpr, mean_tpr)\n","std_auc = np.std(aucs)\n","ax.plot(\n","    mean_fpr,\n","    mean_tpr,\n","    color=\"b\",\n","    label=r\"Mean ROC (AUC = %0.3f $\\pm$ %0.3f)\" % (mean_auc, std_auc),\n","    lw=2,\n","    alpha=0.8,\n",")\n","\n","std_tpr = np.std(tprs, axis=0)\n","tprs_upper = np.minimum(mean_tpr + std_tpr, 1)\n","tprs_lower = np.maximum(mean_tpr - std_tpr, 0)\n","ax.fill_between(\n","    mean_fpr,\n","    tprs_lower,\n","    tprs_upper,\n","    color=\"grey\",\n","    alpha=0.2,\n","    label=r\"$\\pm$ 1 std. dev.\",\n",")\n","\n","ax.set(xlim=[-0.05, 1.05], ylim=[-0.05, 1.05], title=\"ROC Curves\")\n","ax.legend(loc=\"lower right\")\n","plt.savefig(\"roc.png\")\n","\n","print(\"Mean AUC = %0.4f, GINI %0.4f\" % (mean_auc, 2 * mean_auc - 1.0))\n","\n","print(\"\\t\".join(f\"{x:.4f}\" for x in fold_aucs))\n","\n","##Updated\n","#Plot important feature\n","feature_imp = pd.Series(clf.feature_importances_,index=train_fe.columns).sort_values(ascending=False)\n","%matplotlib inline\n","# Creating a bar plot\n","plt.figure(figsize = (50, 50))\n","sns.barplot(x=feature_imp.head(100), y=feature_imp.head(100).index)\n","\n","# Add labels to your graph\n","plt.xlabel('Feature Importance Score')\n","plt.ylabel('Features')\n","plt.title(\"Visualizing Important Features\")\n","#plt.legend()\n","plt.show()\n","##End\n","\n","# averaging for submission\n","res_df = pd.DataFrame(submit_dict)\n","res_df[\"label\"] = res_df[[\"fold%d\" % i for i in range(n_folds)]].mean(axis=1)\n","res_df[[\"id\", \"label\"]].to_csv(\"submission.csv\", index=False)\n","\n","for i in range(n_folds):\n","    res_df[\"label\"] = res_df[f\"fold{i}\"]\n","    res_df[[\"id\", \"label\"]].to_csv(\"submission_fold%d.csv\" % i, index=False)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"elapsed":1582,"status":"ok","timestamp":1600588827250,"user":{"displayName":"Trần Quốc Khánh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVVFfhxvf9yjuqauX7S1hOIYkYyKbpLDYlcZz-=s64","userId":"04381164842406200205"},"user_tz":-420},"id":"oGhpPsuWhuif","outputId":"f9b7851a-d36b-42cf-e300-b83b6a467b56"},"outputs":[{"name":"stdout","output_type":"stream","text":["0\n","1\n","2\n","3\n","4\n"]}],"source":["for i in range (0, 5):\n","  print(i)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QM416RogaW_z"},"outputs":[],"source":["print(\"\\n@Rules\")\n","\n","for i in range(0, 5):\n","    sub_df = pd.read_csv(\"submission_fold%d.csv\" % i)\n","\n","    # Smoothing\n","    y = sub_df.label.to_numpy()\n","    rank = np.argsort(y)\n","    y_smooth = np.arange(len(rank)) * (1.0 / (len(rank) - 1))\n","    y[rank] = y_smooth\n","    sub_df.label = y\n","\n","    rule_df = pd.read_csv(\"rules.csv\", dtype=str, encoding=\"utf-8\")\n","    test_df = pd.read_csv(os.path.join(cd1, \"test.csv\"), dtype=str, encoding=\"utf-8\")\n","\n","    mask = np.ones(sub_df.shape[0])\n","\n","    for col in rule_df.columns:\n","        patterns = set(str_normalize_final(v) for v in rule_df[col].unique())\n","        patterns -= set(['nan'])\n","        if len(patterns) == 0:\n","            continue\n","    \n","        col_mask = test_df[col].apply(lambda x: 0. if str_normalize_final(x) in patterns else 1.)    \n","        mask *= col_mask.to_numpy()\n","    \n","    # Smoothing\n","    y = sub_df.label.to_numpy()\n","    org_idx = np.argwhere(mask).ravel()\n","    y_masked = y[org_idx]\n","    rank = np.argsort(y_masked)\n","    y_smooth = np.arange(1, len(rank) + 1) * (1.0 / (len(rank) + 1))\n","    y_masked[rank] = y_smooth\n","    y[org_idx] = y_masked\n","\n","    sub_df.label = y * mask\n","    sub_df.to_csv(\"final_submission%d.csv\" % i, index=False)"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyO9SgSDUFvBTiW2t2VHFbzI","name":"Kalapa#1","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}